import com.formdev.flatlaf.FlatDarkLaf;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class DrawingTabbed extends JFrame implements KeyListener {
    CardLayout actual, cardLayoutNormal, cardLayoutResponsive;
    JPanel cardsPanel1, cardsPanel2;
    JPopupMenu popupMenu1, popupMenu2;
    ArrayList<DrawingPanel> figurasNormales = new ArrayList<>();
    ArrayList<DrawingPanel> figurasResponsive = new ArrayList<>();
    int indiceFigura = 0;

    public DrawingTabbed() {
        super("Figures: Hilbert curve (normal)");

        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }

        setDefaultCloseOperation(EXIT_ON_CLOSE);

        //CREAM ELS DOS PANELLS PRINCIPALS I ELS DOS CARDLAYOUT
        cardLayoutNormal = new CardLayout();
        cardLayoutResponsive = new CardLayout();
        cardsPanel1 = new JPanel(cardLayoutNormal);
        cardsPanel2 = new JPanel(cardLayoutResponsive);

        //INDICAM EL CARDLAYOUT ACTUAL
        actual = cardLayoutNormal;

        //INICIALITZAM LES FIGURES
        DrawingPanel hilbertPanel = new HilbertCurve(7);
        DrawingPanel hilbertResponsivePanel = new HilbertCurveResponsive(7);
        DrawingPanel mengerPanel = new MengerCarpet(5);
        DrawingPanel mengerResponsivePanel = new MengerCarpetResponsive(5);
        DrawingPanel polynskiPanel = new Polynski(6, 24);
        DrawingPanel polynskiResponsivePanel = new PolynskiResponsive(6, 24);
        DrawingPanel sierpinskiPanel = new SierpinskiTriangle(8);
        DrawingPanel sierpinskiResponsivePanel = new SierpinskiTriangleResponsive(8);

        //AFEGIM LES FIGURES A L'ARRAY CORRESPONENT
        figurasNormales.add(hilbertPanel);
        figurasResponsive.add(hilbertResponsivePanel);
        figurasNormales.add(mengerPanel);
        figurasResponsive.add(mengerResponsivePanel);
        figurasNormales.add(polynskiPanel);
        figurasResponsive.add(polynskiResponsivePanel);
        figurasNormales.add(sierpinskiPanel);
        figurasResponsive.add(sierpinskiResponsivePanel);

        //PER CADA FIGURA DINS L'ARRAY 'figuresNormals' l'afegim a 'cardsPanel1'
        for (int i = 0; i < figurasNormales.size(); i++) {
            DrawingPanel figura = figurasNormales.get(i);
            cardsPanel1.add(figura, String.valueOf(i));
        }

        //PER CADA FIGURA DINS L'ARRAY 'figurasResponsive' l'afegim a 'cardsPanel2'
        for (int i = 0; i < figurasResponsive.size(); i++) {
            DrawingPanel figura = figurasResponsive.get(i);
            cardsPanel2.add(figura, String.valueOf(i));
        }

        //CREAM ELS DOS POPUPMENU
        popupMenu1 = new JPopupMenu();
        popupMenu2 = new JPopupMenu();

        //PER CADA FIGURA DINS L'ARRAY 'figuresNormals' l'afegim a 'popupMenu1' I UN ACTION_LISTENER PER QUAN SIGUI SELECCIONAT
        for (int i = 0; i < figurasNormales.size(); i++) {
            DrawingPanel figura = figurasNormales.get(i);
            JMenuItem item = new JMenuItem(figura.getTitle());
            int finalI = i;
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    actual.show(cardsPanel1, String.valueOf(finalI));
                    indiceFigura = finalI;
                    setTitle("Figures: " + figurasNormales.get(indiceFigura).getTitle() + " (normal)");
                }
            });
            popupMenu1.add(item);
        }

        //PER CADA FIGURA DINS L'ARRAY 'figurasResponsive' l'afegim a 'popupMenu2' I UN ACTION_LISTENER PER QUAN SIGUI SELECCIONAT
        for (int i = 0; i < figurasResponsive.size(); i++) {
            DrawingPanel figura = figurasResponsive.get(i);
            JMenuItem item = new JMenuItem(figura.getTitle());
            int finalI = i;
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    actual.show(cardsPanel2, String.valueOf(finalI));
                    indiceFigura = finalI;
                    setTitle("Figures: " + figurasResponsive.get(indiceFigura).getTitle() + " (responsive)");
                }
            });
            popupMenu2.add(item);
        }

        //MOUSE_LISTENER PER SI FEIM CLIC DRET A 'cardsPanel1'
        cardsPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (SwingUtilities.isRightMouseButton(evt)) {
                    popupMenu1.show(cardsPanel1, evt.getX(), evt.getY());
                }
            }
        });

        //MOUSE_LISTENER PER SI FEIM CLIC DRET A 'cardsPanel2'
        cardsPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (SwingUtilities.isRightMouseButton(evt)) {
                    popupMenu2.show(cardsPanel2, evt.getX(), evt.getY());
                }
            }
        });

        //PER DEFECTE
        getContentPane().add(cardsPanel1);
        getContentPane().setBackground(new Color(0x191919));

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        String keyName = KeyEvent.getKeyText(keyCode);
        System.out.println(keyName);
        switch (keyCode) {
            case KeyEvent.VK_LEFT -> cambiarFiguraAnterior();
            case KeyEvent.VK_RIGHT -> cambiarFiguraSiguiente();
            case KeyEvent.VK_ESCAPE -> System.exit(-1);
            case KeyEvent.VK_SPACE -> cambiarModo();
            case KeyEvent.VK_UP -> pujarNivell(); //PER PUJAR EL NIVELL SEGONS ESTEIM DINS LES FIGURES NORMALS O RESPONSIVE
            case KeyEvent.VK_DOWN -> baixarNivell(); //PER BAIXAR EL NIVELL SEGONS ESTEIM DINS LES FIGURES NORMALS O RESPONSIVE
            case KeyEvent.VK_PLUS -> pujarSides(); //PER PUJAR ELS COSTATS SEGONS ESTEIM DINS LES FIGURES NORMALS O RESPONSIVE (Polynski i PolynskiResponsive)
            case KeyEvent.VK_ADD -> pujarSides(); // NUMPAD +
            case KeyEvent.VK_MINUS -> baixarSides(); //PER BAIXAR ELS COSTATS SEGONS ESTEIM DINS LES FIGURES NORMALS O RESPONSIVE (Polynski i PolynskiResponsive)
            case KeyEvent.VK_SUBTRACT -> baixarSides(); // NUMPAD -
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    private void pujarNivell() {
        if (actual == cardLayoutNormal) {
            figurasNormales.get(indiceFigura).subirNivel();
        } else {
            figurasResponsive.get(indiceFigura).subirNivel();
        }
    }

    private void baixarNivell() {
        if (actual == cardLayoutNormal) {
            figurasNormales.get(indiceFigura).bajarNivel();
        } else {
            figurasResponsive.get(indiceFigura).bajarNivel();
        }
    }

    private void pujarSides() {
        if (actual == cardLayoutNormal) {
            figurasNormales.get(indiceFigura).subirSides();
        } else {
            figurasResponsive.get(indiceFigura).subirSides();
        }
    }

    private void baixarSides() {
        if (actual == cardLayoutNormal) {
            figurasNormales.get(indiceFigura).bajarSides();
        } else {
            figurasResponsive.get(indiceFigura).bajarSides();
        }
    }

    // PER cambiarFiguraAnterior SEGONS ESTEIM DINS LES FIGURES NORMALS O RESPONSIVE
    private void cambiarFiguraAnterior() {
        if (actual == cardLayoutNormal) {
            cardLayoutNormal.previous(cardsPanel1);
            indiceFigura = (indiceFigura - 1 + figurasNormales.size()) % figurasNormales.size();
            setTitle("Figures: " + figurasNormales.get(indiceFigura).getTitle() + " (normal)");
        } else {
            cardLayoutResponsive.previous(cardsPanel2);
            indiceFigura = (indiceFigura - 1 + figurasResponsive.size()) % figurasResponsive.size();
            setTitle("Figures: " + figurasResponsive.get(indiceFigura).getTitle() + " (responsive)");
        }
    }

    // PER cambiarFiguraSiguiente SEGONS ESTEIM DINS LES FIGURES NORMALS O RESPONSIVE
    private void cambiarFiguraSiguiente() {
        if (actual == cardLayoutNormal) {
            cardLayoutNormal.next(cardsPanel1);
            indiceFigura = (indiceFigura + 1) % figurasNormales.size();
            setTitle("Figures: " + figurasNormales.get(indiceFigura).getTitle() + " (normal)");
        } else {
            cardLayoutResponsive.next(cardsPanel2);
            indiceFigura = (indiceFigura + 1) % figurasResponsive.size();
            setTitle("Figures: " + figurasResponsive.get(indiceFigura).getTitle() + " (responsive)");
        }
    }

    // PER CANVIAR EL MODE (de cardLayoutNormal a cardLayoutResponsive o viceversa)
    // I SEGUIR DINS EL MATEIX INDEX DINS DELS DOS ARRAYS PER CAMBIAR AMB LA MATEIXA FIGURA
    private void cambiarModo() {
        if (actual == cardLayoutNormal) {
            actual = cardLayoutResponsive;
            getContentPane().remove(cardsPanel1);
            getContentPane().add(cardsPanel2);
            setTitle("Figures: " + figurasResponsive.get(indiceFigura).getTitle() + " (responsive)");
        } else {
            actual = cardLayoutNormal;
            getContentPane().remove(cardsPanel2);
            getContentPane().add(cardsPanel1);
            setTitle("Figures: " + figurasNormales.get(indiceFigura).getTitle() + " (normal)");
        }

        if (actual == cardLayoutNormal) {
            cardLayoutNormal.show(cardsPanel1, String.valueOf(indiceFigura));
        } else {
            cardLayoutResponsive.show(cardsPanel2, String.valueOf(indiceFigura));
        }

        revalidate();
        repaint();
    }
}
